#!/usr/bin/env python3
"""
Script de test pour v√©rifier le post-processeur Python pur
Compatible avec MultiDNN2
"""

import numpy as np
import random

def test_decode_yolo():
    """Test simple du d√©codage YOLO en Python pur"""
    
    # Simuler une sortie YOLO
    grid_h, grid_w = 36, 64
    num_anchors = 3
    num_classes = 80
    output_shape = (1, num_anchors * (5 + num_classes), grid_h, grid_w)
    
    # Cr√©er des donn√©es de test
    output = np.random.randn(*output_shape).astype(np.float32)
    
    # Anchors de test (YOLOv7-tiny premi√®re couche)
    anchors = [(10, 13), (16, 30), (33, 23)]
    
    # Param√®tres
    blob_w, blob_h = 512, 288
    conf_thresh = 0.2
    
    # D√©coder
    boxes = []
    confidences = []
    class_ids = []
    
    # Reshape pour le traitement
    output_reshaped = output.reshape((num_anchors, 5 + num_classes, grid_h, grid_w))
    output_reshaped = output_reshaped.transpose(0, 2, 3, 1)
    
    print(f"üîç Test de d√©codage YOLO Python pur")
    print(f"   Shape entr√©e: {output_shape}")
    print(f"   Grille: {grid_w}x{grid_h}")
    print(f"   Anchors: {anchors}")
    print(f"   Classes: {num_classes}")
    
    detections_found = 0
    
    for anchor_idx in range(num_anchors):
        for y in range(grid_h):
            for x in range(grid_w):
                data = output_reshaped[anchor_idx, y, x]
                
                # Objectness
                objectness = 1.0 / (1.0 + np.exp(-data[4]))
                
                if objectness > conf_thresh:
                    # Trouver la meilleure classe
                    class_scores = 1.0 / (1.0 + np.exp(-data[5:]))
                    class_id = np.argmax(class_scores)
                    confidence = objectness * class_scores[class_id]
                    
                    if confidence > conf_thresh:
                        detections_found += 1
                        
                        # D√©coder les coordonn√©es
                        tx, ty, tw, th = data[0:4]
                        anchor_w, anchor_h = anchors[anchor_idx]
                        
                        # Coordonn√©es de la bo√Æte (simplifi√©es)
                        bx = (1.0 / (1.0 + np.exp(-tx)) + x) * blob_w / grid_w
                        by = (1.0 / (1.0 + np.exp(-ty)) + y) * blob_h / grid_h
                        bw = np.exp(tw) * anchor_w * blob_w / grid_w
                        bh = np.exp(th) * anchor_h * blob_h / grid_h
                        
                        # Ajouter un ID al√©atoire
                        random_id = random.randint(1, 999)
                        
                        if detections_found <= 3:  # Afficher les 3 premi√®res d√©tections
                            print(f"   ‚úÖ D√©tection {detections_found}: ID{random_id}, "
                                  f"classe={class_id}, conf={confidence:.2f}, "
                                  f"box=[{int(bx)},{int(by)},{int(bw)},{int(bh)}]")
    
    print(f"\nüìä R√©sultat: {detections_found} d√©tections simul√©es trouv√©es")
    print(f"   (Avec donn√©es al√©atoires, c'est normal d'avoir peu de d√©tections)")
    
    return detections_found > 0

def test_multidnn2_compatibility():
    """V√©rifier que le code ne d√©pend pas de PyPostYOLO"""
    
    print("\nüß™ Test de compatibilit√© MultiDNN2")
    
    # V√©rifier qu'on n'importe pas PyPostYOLO
    dangerous_imports = [
        "jevois.PyPostYOLO",
        "getSubComponent",
        "pipeline"
    ]
    
    with open("PyPostYoloRandomID_PurePython.py", 'r') as f:
        code = f.read()
    
    issues = []
    for dangerous in dangerous_imports:
        if dangerous in code:
            issues.append(dangerous)
    
    if issues:
        print(f"   ‚ùå Code d√©pendant trouv√©: {issues}")
        return False
    else:
        print(f"   ‚úÖ Aucune d√©pendance √† PyPostYOLO ou pipeline")
        return True

def main():
    """Tests principaux"""
    
    print("=" * 60)
    print("üöÄ TEST DU POST-PROCESSEUR YOLO PYTHON PUR")
    print("   Compatible DNN et MultiDNN2")
    print("=" * 60)
    
    # Test 1: D√©codage YOLO
    test1 = test_decode_yolo()
    
    # Test 2: Compatibilit√© MultiDNN2
    test2 = test_multidnn2_compatibility()
    
    print("\n" + "=" * 60)
    print("üìà R√âSUM√â DES TESTS")
    print("=" * 60)
    print(f"   D√©codage YOLO: {'‚úÖ PASS' if test1 else '‚ùå FAIL'}")
    print(f"   Compatibilit√© MultiDNN2: {'‚úÖ PASS' if test2 else '‚ùå FAIL'}")
    
    if test1 and test2:
        print("\nüéâ TOUS LES TESTS PASSENT - Pr√™t pour MultiDNN2!")
    else:
        print("\n‚ö†Ô∏è  Certains tests ont √©chou√©")

if __name__ == "__main__":
    main()